package dev.oianmol.opentestlab.api.models

import kotlinx.serialization.Serializable

@Serializable
data class DeviceFarmDevice(
    val ipAddress: String,
    val port: String,
    val serialNumber: String,
    val model: String
) {
    class Builder {
        private var ipAddress: String = ""
        private var port: String = ""
        private var serialNumber: String = ""
        private var model: String = ""

        fun ipAddress(ipAddress: String) = apply { this.ipAddress = ipAddress }
        fun port(port: String) = apply { this.port = port }
        fun serialNumber(serialNumber: String) = apply { this.serialNumber = serialNumber }
        fun model(model: String) = apply { this.model = model }

        fun build() = DeviceFarmDevice(ipAddress, port, serialNumber, model)
    }
}

@Serializable
data class TestMachine(
    val ipAddress: String,
    val name: String,
    val location: String,
    val isBusy: Boolean,
    val devices: List<DeviceFarmDevice>
) {
    class Builder {
        private var ipAddress: String = ""
        private var name: String = ""
        private var location: String = ""
        private var isBusy: Boolean = false
        private var devices: List<DeviceFarmDevice> = listOf()

        fun ipAddress(ipAddress: String) = apply { this.ipAddress = ipAddress }
        fun name(name: String) = apply { this.name = name }
        fun location(location: String) = apply { this.location = location }
        fun isBusy(isBusy: Boolean) = apply { this.isBusy = isBusy }
        fun devices(devices: List<DeviceFarmDevice>) = apply { this.devices = devices }

        fun build() = TestMachine(ipAddress, name, location, isBusy, devices)
    }
}

@Serializable
data class DeviceFarmInfo(
    val machines: List<TestMachine>
) {
    class Builder {
        private var machines: List<TestMachine> = listOf()

        fun machines(machines: List<TestMachine>) = apply { this.machines = machines }

        fun build() = DeviceFarmInfo(machines)
    }
}

enum class FileType {
    TestApk,
    AndroidApk,
    AppBundle
}

@Serializable
data class ReportFiles(
    val reportFile: ByteArray,
    val fileName: String
) {
    class Builder {
        private var reportFile: ByteArray = byteArrayOf()
        private var fileName: String = ""

        fun reportFile(reportFile: ByteArray) = apply { this.reportFile = reportFile }
        fun fileName(fileName: String) = apply { this.fileName = fileName }

        fun build() = ReportFiles(reportFile, fileName)
    }
}

@Serializable
data class ReportsRequest(
    val ciUniqueBuildNumber: String
) {
    class Builder {
        private var ciUniqueBuildNumber: String = ""

        fun ciUniqueBuildNumber(ciUniqueBuildNumber: String) = apply { this.ciUniqueBuildNumber = ciUniqueBuildNumber }

        fun build() = ReportsRequest(ciUniqueBuildNumber)
    }
}

@Serializable
data class DeviceFarmTestSpec(
    val ciUniqueBuildNumber: String,
    val listenerClass: String,
    val testPackageFilter: String,
    val instrumentPackage: String,
    val customRunner: String,
    val packageName: String,
    val testPackageName: String
) {
    class Builder {
        private var ciUniqueBuildNumber: String = ""
        private var listenerClass: String = ""
        private var testPackageFilter: String = ""
        private var instrumentPackage: String = ""
        private var customRunner: String = ""
        private var packageName: String = ""
        private var testPackageName: String = ""

        fun ciUniqueBuildNumber(ciUniqueBuildNumber: String) = apply { this.ciUniqueBuildNumber = ciUniqueBuildNumber }
        fun listenerClass(listenerClass: String) = apply { this.listenerClass = listenerClass }
        fun testPackageFilter(testPackageFilter: String) = apply { this.testPackageFilter = testPackageFilter }
        fun instrumentPackage(instrumentPackage: String) = apply { this.instrumentPackage = instrumentPackage }
        fun customRunner(customRunner: String) = apply { this.customRunner = customRunner }
        fun packageName(packageName: String) = apply { this.packageName = packageName }
        fun testPackageName(testPackageName: String) = apply { this.testPackageName = testPackageName }

        fun build() = DeviceFarmTestSpec(ciUniqueBuildNumber, listenerClass, testPackageFilter, instrumentPackage, customRunner, packageName, testPackageName)
    }
}

@Serializable
data class DeviceFarmTestResults(
    val testsuite: List<Testsuite>
) {
    class Builder {
        private var testsuite: List<Testsuite> = listOf()

        fun testsuite(testsuite: List<Testsuite>) = apply { this.testsuite = testsuite }

        fun build() = DeviceFarmTestResults(testsuite)
    }

    @Serializable
    data class Property(
        val name: String,
        val value: String
    ) {
        class Builder {
            private var name: String = ""
            private var value: String = ""

            fun name(name: String) = apply { this.name = name }
            fun value(value: String) = apply { this.value = value }

            fun build() = Property(name, value)
        }
    }

    @Serializable
    data class Properties(
        val property: List<Property>
    ) {
        class Builder {
            private var property: List<Property> = listOf()

            fun property(property: List<Property>) = apply { this.property = property }

            fun build() = Properties(property)
        }
    }

    @Serializable
    data class Testcase(
        val classname: String,
        val name: String,
        val status: String,
        val time: Int,
        val trace: String?,
        val message: String?,
        val type: String?
    ) {
        class Builder {
            private var classname: String = ""
            private var name: String = ""
            private var status: String = ""
            private var time: Int = 0
            private var trace: String? = null
            private var message: String? = null
            private var type: String? = null

            fun classname(classname: String) = apply { this.classname = classname }
            fun name(name: String) = apply { this.name = name }
            fun status(status: String) = apply { this.status = status }
            fun time(time: Int) = apply { this.time = time }
            fun trace(trace: String?) = apply { this.trace = trace }
            fun message(message: String?) = apply { this.message = message }
            fun type(type: String?) = apply { this.type = type }

            fun build() = Testcase(classname, name, status, time, trace, message, type)
        }
    }

    @Serializable
    data class Testsuite(
        val errors: Int,
        val failures: Int,
        val hostname: String,
        val name: String,
        val properties: Properties,
        val skipped: Int,
        val testcase: List<Testcase>,
        val tests: Int,
        val time: Int,
        val timestamp: String
    ) {
        class Builder {
            private var errors: Int = 0
            private var failures: Int = 0
            private var hostname: String = ""
            private var name: String = ""
            private var properties: Properties = Properties(listOf())
            private var skipped: Int = 0
            private var testcase: List<Testcase> = listOf()
            private var tests: Int = 0
            private var time: Int = 0
            private var timestamp: String = ""

            fun errors(errors: Int) = apply { this.errors = errors }
            fun failures(failures: Int) = apply { this.failures = failures }
            fun hostname(hostname: String) = apply { this.hostname = hostname }
            fun name(name: String) = apply { this.name = name }
            fun properties(properties: Properties) = apply { this.properties = properties }
            fun skipped(skipped: Int) = apply { this.skipped = skipped }
            fun testcase(testcase: List<Testcase>?) = apply { this.testcase = testcase?: emptyList() }
            fun tests(tests: Int) = apply { this.tests = tests }
            fun time(time: Int) = apply { this.time = time }
            fun timestamp(timestamp: String) = apply { this.timestamp = timestamp }

            fun build() = Testsuite(errors, failures, hostname, name, properties, skipped, testcase, tests, time, timestamp)
        }
    }
}

@Serializable
data class TestApkUpload(
    val testApk: ByteArray,
    val ciUniqueBuildNumber: String,
    val fileType: FileType
) {
    class Builder {
        private var testApk: ByteArray = byteArrayOf()
        private var ciUniqueBuildNumber: String = ""
        private var fileType: FileType = FileType.TestApk

        fun testApk(testApk: ByteArray) = apply { this.testApk = testApk }
        fun ciUniqueBuildNumber(ciUniqueBuildNumber: String) = apply { this.ciUniqueBuildNumber = ciUniqueBuildNumber }
        fun fileType(fileType: FileType) = apply { this.fileType = fileType }

        fun build() = TestApkUpload(testApk, ciUniqueBuildNumber, fileType)
    }
}

@Serializable
data class StreamLogs(
    val message: String
) {
    class Builder {
        private var message: String = ""

        fun message(message: String) = apply { this.message = message }

        fun build() = StreamLogs(message)
    }
}
