package dev.oianmol.opentestlab.plugins

import dev.oianmol.dev.oianmol.opentestlab.android.adbandfriends.DeviceDiscovery
import dev.oianmol.dev.oianmol.opentestlab.android.reporting.DeviceFarmReportManagementService
import dev.oianmol.dev.oianmol.opentestlab.android.testexec.TestExecutionService
import dev.oianmol.opentestlab.api.models.*
import io.github.smiley4.ktorswaggerui.SwaggerUI
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.plugins.autohead.*
import io.ktor.server.plugins.statuspages.*
import io.ktor.server.request.*
import io.ktor.server.resources.*
import io.ktor.server.response.*
import io.ktor.server.routing.*
import org.koin.ktor.ext.inject

fun Application.configureRouting() {
    install(AutoHeadResponse)
    install(SwaggerUI) {
        swagger {
            swaggerUrl = "swagger-ui"
            forwardRoot = true
        }
        info {
            title = "Example API"
            version = "latest"
            description = "Example API for testing and demonstration purposes."
        }
        server {
            url = "http://localhost:8080"
            description = "Development Server"
        }
    }
    install(Resources)
    install(StatusPages) {
        exception<Throwable> { call, cause ->
            call.respondText(text = "500: $cause", status = HttpStatusCode.InternalServerError)
        }
    }
    routing {
        deviceFarmService()
        testExecutionService()
        reportManagementService()
    }

}

fun Routing.deviceFarmService() {
    val deviceDiscovery: DeviceDiscovery by inject()

    route("/deviceFarm") {
        get("/info") {
            // Implement your logic to get device farm info
            call.respond(DeviceFarmInfo(machines = listOf(deviceDiscovery.hostMachine())))
        }
    }
}

fun Routing.testExecutionService() {
    val testExecutionService: TestExecutionService by inject()
    route("/testExecution") {
        post("/uploadTestApk") {
            val testApkUpload = call.receive<TestApkUpload>()
            testExecutionService.uploadTestApk(testApkUpload)
            call.respond(StreamLogs("Log message"))
        }

        post("/executeTests") {
            val testSpec = call.receive<DeviceFarmTestSpec>()
            val results = testExecutionService.executeTests(testSpec)
            call.respond(results)
        }
    }
}

fun Routing.reportManagementService() {
    val deviceFarmReportManagementService: DeviceFarmReportManagementService by inject()

    route("/reportManagement") {
        post("/pullReportFiles") {
            val request = call.receive<ReportsRequest>()
            call.respond(deviceFarmReportManagementService.pullReportFiles(request))
        }
    }
}
