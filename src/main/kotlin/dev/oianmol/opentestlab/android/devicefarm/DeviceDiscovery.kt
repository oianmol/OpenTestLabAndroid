package dev.oianmol.dev.oianmol.opentestlab.android.adbandfriends

import dev.oianmol.dev.oianmol.opentestlab.android.devicefarm.cli.CommandLine
import dev.oianmol.dev.oianmol.opentestlab.android.devicefarm.friends.Adb
import dev.oianmol.opentestlab.android.devicefarm.Device
import dev.oianmol.opentestlab.api.models.DeviceFarmDevice
import dev.oianmol.opentestlab.api.models.TestMachine
import java.net.InetAddress

interface DeviceDiscovery {
    fun listDevices(): List<DeviceFarmDevice>
    fun hostMachine(): TestMachine
}

object DeviceDiscoveryViaADB : DeviceDiscovery {

    override fun listDevices(): List<DeviceFarmDevice> {
        return Adb.getDevicesConnectedByUSB().map { dadb ->
            dadb.toDeviceFarmDevice()
        }
    }

    override fun hostMachine(): TestMachine {
        return testMachine(listDevices())
    }
}

fun Device.toDeviceFarmDevice(): DeviceFarmDevice {
    val ip = getDeviceProperty("shell ip -f inet addr show wlan0")?.let { Adb.parseGetDeviceIp(it) }
    val serialNumber = getDeviceProperty("shell getprop ro.boot.serialno")
    val model = getDeviceProperty("shell getprop ro.product.model")

    return DeviceFarmDevice(
        ipAddress = ip?.trim() ?: "Unknown",
        model = model?.trim() ?: "Unknown",
        serialNumber = serialNumber ?: "Unknown",
        port = ip?.split(":")?.lastOrNull() ?: "0"
    )
}

private fun Device.getDeviceProperty(commandSuffix: String): String? {
    return try {
        CommandLine.executeCommand(Adb.adbCommand(" -s ${this.id} $commandSuffix")).getOrThrow().trim()
    } catch (e: Exception) {
        // Log the error
        println("Failed to execute command for device ${this.id}: ${e.message}")
        null
    }
}

fun testMachine(devices: List<DeviceFarmDevice>): TestMachine {
    return TestMachine(
        ipAddress = InetAddress.getLocalHost().hostAddress,
        name = InetAddress.getLocalHost().hostName,
        location = "PRIMARY DEVICE!",
        devices = devices, isBusy = false
    )
}
