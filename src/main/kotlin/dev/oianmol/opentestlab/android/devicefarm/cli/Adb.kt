package dev.oianmol.dev.oianmol.opentestlab.android.devicefarm.friends

import dev.oianmol.dev.oianmol.opentestlab.android.devicefarm.cli.CommandLine
import dev.oianmol.opentestlab.android.devicefarm.Device
import dev.oianmol.opentestlab.android.devicefarm.cli.AdbPathFinder
import java.util.logging.Logger

object Adb {

    private val logger = Logger.getLogger("ADB")

    private const val MODEL_INDICATOR = "model:"
    private const val DEVICE_INDICATOR = "device:"
    private const val END_DEVICE_IP_INDICATOR = "/"
    private const val START_DEVICE_IP_INDICATOR = "inet"
    private const val ERROR_PARSING_DEVICE_IP_KEY = "Object"
    private const val DAEMON_INDICATOR = "daemon"

    private fun parseGetDevicesOutput(adbDevicesOutput: String): List<Device> {
        println(adbDevicesOutput)
        if (adbDevicesOutput.contains(DAEMON_INDICATOR)) return emptyList()

        return adbDevicesOutput.lines()
            .drop(1)
            .filter { it.isNotBlank() }
            .mapNotNull { line ->
                val deviceLine = line.split("\\t".toRegex()).firstOrNull() ?: return@mapNotNull null
                val id = deviceLine.substringBefore(" ")
                val name = parseDeviceName(line)
                Device(name, id)
            }
    }

    fun parseGetDeviceIp(ipInfo: String): String {
        return when {
            ipInfo.isEmpty() || ipInfo.contains(ERROR_PARSING_DEVICE_IP_KEY) -> ""
            else -> try {
                val start = ipInfo.indexOf(START_DEVICE_IP_INDICATOR) + START_DEVICE_IP_INDICATOR.length + 1
                val end = ipInfo.indexOf(END_DEVICE_IP_INDICATOR, start)
                ipInfo.substring(start, end)
            } catch (e: StringIndexOutOfBoundsException) {
                logger.severe("Error parsing IP: ${e.message}")
                ""
            }
        }
    }

    private fun parseDeviceName(line: String): String {
        val start = line.indexOf(MODEL_INDICATOR) + MODEL_INDICATOR.length
        val end = line.indexOf(DEVICE_INDICATOR).takeIf { it > 0 } ?: line.length
        return line.substring(start, end).trim()
    }

    private fun adbPath(): String {
        val adbPathFinder = AdbPathFinder()
        val adbPath = adbPathFinder.findAdbPath()
        return adbPath!!
    }

    fun adbCommand(command: String): String =
        "${adbPath()} $command"

    fun getDevicesConnectedByUSB(): Collection<Device> {
        val adbDevicesOutput: String = CommandLine.executeCommand(adbCommand("devices -l")).getOrThrow()
        return parseGetDevicesOutput(adbDevicesOutput)
    }
}
