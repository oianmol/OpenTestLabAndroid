package dev.oianmol.opentestlab.android.devicefarm.cli

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.io.BufferedInputStream
import java.io.File
import java.io.FileOutputStream
import java.io.IOException
import java.net.URL
import java.nio.file.Files
import java.nio.file.Paths
import kotlin.io.path.absolutePathString

class AABToAPKConverter(private val bundleToolUrl: String = LATEST_BUNDLE_TOOL) {
    companion object {
        const val LATEST_BUNDLE_TOOL =
            "https://github.com/google/bundletool/releases/download/1.17.0/bundletool-all-1.17.0.jar"
    }

    /**
     * Converts an AAB file to an APK set and extracts the universal APK.
     *
     * @param aabPath The path to the .aab file.
     * @param outputDir The directory where the APK set and the universal APK will be saved.
     * @param bundleToolPath The path to the bundletool.jar file.
     * @throws IOException If an I/O error occurs.
     * @throws InterruptedException If the process is interrupted.
     */
    suspend fun convertAABToAPK(
        aabPath: String,
        bundleToolPath: String? = null
    ): File? {
        val aabFile = File(aabPath)
        require(aabFile.exists()) { "AAB file does not exist at path: $aabPath" }
        val bundleToolPath =
            bundleToolPath ?: withContext(Dispatchers.IO) {
                Files.createTempDirectory("bundletool")
            }.resolve("bundletool.jar").toString()

        val bundleToolFile = File(bundleToolPath)

        // Download the bundletool if it does not exist
        if (!bundleToolFile.exists()) {
            downloadFile(bundleToolUrl, bundleToolPath)
        }
        val outputDir = Files.createTempDirectory("aabFiles").absolutePathString()
        val apksPath = "${outputDir}/output.apks"

        // Ensure the output directory exists
        withContext(Dispatchers.IO) {
            Files.createDirectories(Paths.get(outputDir))
        }

        // Step 1: Build the APK set
        val buildApksCommand = arrayOf(
            "java", "-jar", bundleToolPath,
            "build-apks",
            "--bundle=${aabFile.absolutePath}",
            "--output=$apksPath",
            "--mode=universal"
        )
        executeCommand(buildApksCommand)

        // Step 2: Extract the universal APK from the APK set
        val unzipCommand = arrayOf(
            "unzip", apksPath, "-d", outputDir
        )
        executeCommand(unzipCommand)

        println("Conversion complete. The APK files are in: $outputDir")
        // Step 3: List the generated APK files
        val apkFiles = File(outputDir).listFiles { _, name -> name.endsWith(".apk") }
        apkFiles?.forEach { println(it.absolutePath) }
        return apkFiles.first()
    }

    private suspend fun executeCommand(command: Array<String>) = withContext(Dispatchers.IO) {
        val processBuilder = ProcessBuilder(*command)
        val process = processBuilder.start()
        val exitCode = process.waitFor()
        if (exitCode != 0) {
            throw IOException("Command execution failed: ${command.joinToString(" ")}")
        }
    }

    private suspend fun downloadFile(fileURL: String, savePath: String) = withContext(Dispatchers.IO) {
        val url = URL(fileURL)
        val connection = url.openConnection()
        connection.connect()

        val inputStream = BufferedInputStream(url.openStream(), 8192)
        val outputStream = FileOutputStream(savePath)

        val data = ByteArray(1024)
        var count: Int
        while (inputStream.read(data).also { count = it } != -1) {
            outputStream.write(data, 0, count)
        }

        outputStream.flush()
        outputStream.close()
        inputStream.close()

        println("Downloaded file to: $savePath")
    }
}
