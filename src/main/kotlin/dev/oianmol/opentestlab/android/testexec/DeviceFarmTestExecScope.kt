package dev.oianmol.opentestlab.android.testexec

import dev.oianmol.opentestlab.DeviceFarmTestSpec
import dev.oianmol.opentestlab.FileType
import dev.oianmol.opentestlab.ReportsRequest
import dev.oianmol.opentestlab.TestApkUpload
import dev.oianmol.opentestlab.android.devicefarm.cli.AABToAPKConverter
import io.grpc.Status
import io.grpc.StatusException
import java.io.File
import java.nio.file.Files
import kotlin.io.path.absolutePathString

object DeviceFarmTestExecScope : TestExecScope {

    override suspend fun writeFiles(it: TestApkUpload, function: suspend () -> Unit) {
        testWorkingDir(it.ciUniqueBuildNumber).apply {
            when (it.fileType) {
                FileType.TestApk -> androidTestApk(this).appendBytes(it.testApk.toByteArray()).also { function() }
                FileType.AndroidApk -> androidAppApk(this).appendBytes(it.testApk.toByteArray()).also { function() }
                FileType.AppBundle -> androidAppAab(this).appendBytes(it.testApk.toByteArray()).also { function() }
                else -> throw StatusException(Status.INVALID_ARGUMENT)
            }
        }
    }

    override fun createDirs(ciUniqueBuildNumber: String) {
        testWorkingDir(ciUniqueBuildNumber).apply {
            mkdirs()
            // we delete these files if existing already!
            androidTestApk(this).delete()
            androidAppApk(this).delete()
            androidAppAab(this).delete()
        }
    }

    override fun workingReportsDir(request: ReportsRequest): File {
        val workingdir = testWorkingDir(request.ciUniqueBuildNumber)
        return File(workingdir, "reports")
    }

    override suspend fun prepareFor(request: DeviceFarmTestSpec): TestExecutionTaskSpec {
        return with(testWorkingDir(request.ciUniqueBuildNumber)) {
            val aabFilePath = androidAppAab(this)
            val apkPath = if (aabFilePath.exists() && aabFilePath.length() > 0) {
                // if an aab was uploaded we convert it to a universal apk
                AABToAPKConverter().convertAABToAPK(
                    aabPath = androidAppAab(
                        testResultsDir = this
                    ).absolutePath
                ) ?: throw StatusException(Status.NOT_FOUND)
            } else {
                androidAppApk(this)
            }

            TestExecutionTaskSpec(
                workingDir = this,
                androidTestApk = androidTestApk(this),
                androidAppApk = apkPath,
                listenerClass = request.listenerClass,
                testPackageFilter = request.testPackageFilter,
                instrumentPackage = request.testPackageName,
                customRunner = request.customRunner,
                packageName = request.packageName,
                testPackageName = request.testPackageName,
            )
        }
    }

    fun testWorkingDir(ciUniqueBuildNumber: String) = File(
        userHome().plus(File.separator) + "deviceFarm",
        ciUniqueBuildNumber
    )

    private fun userHome(): String =
        System.getProperty("user.home") ?: Files.createTempDirectory("test").absolutePathString()

    private fun apksDir(testResultsDir: File) = File(testResultsDir, "apks").apply { mkdirs() }
    private fun androidAppApk(testResultsDir: File) = File(apksDir(testResultsDir), "android.apk")
    private fun androidTestApk(testResultsDir: File) = File(apksDir(testResultsDir), "androidTest.apk")
    private fun androidAppAab(testResultsDir: File): File = File(apksDir(testResultsDir), "android.aab")
}