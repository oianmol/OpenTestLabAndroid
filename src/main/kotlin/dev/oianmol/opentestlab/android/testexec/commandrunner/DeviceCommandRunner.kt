package dev.oianmol.opentestlab.android.testexec.commandrunner

import dev.oianmol.dev.oianmol.opentestlab.android.devicefarm.friends.Adb
import dev.oianmol.dev.oianmol.opentestlab.android.devicefarm.cli.CommandLine
import dev.oianmol.opentestlab.android.testexec.TestExecutionTaskSpec
import dev.oianmol.opentestlab.api.models.DeviceFarmDevice
import java.io.File
import java.util.logging.Logger

interface DeviceCommandRunner {
    fun deviceConnection(device: DeviceFarmDevice): IDeviceConnection
}

object DefaultDeviceCommandRunner : DeviceCommandRunner {
    override fun deviceConnection(device: DeviceFarmDevice): IDeviceConnection {
        return DefaultDeviceConnection(device)
    }
}

interface IDeviceConnection {
    fun uninstallApks(testPackageName: String, packageName: String)
    fun deleteTestResults()
    fun pullTestResults(testExecutionTaskSpec: TestExecutionTaskSpec)
    fun installApks(testExecutionTaskSpec: TestExecutionTaskSpec)
    fun runAndroidTests(
        testExecutionTaskSpec: TestExecutionTaskSpec,
        totalDevices: Int,
        currentDeviceIndex: Int
    )

    fun installOrchestratorApk()
}


class DefaultDeviceConnection(private val device: DeviceFarmDevice) : IDeviceConnection {
    private val logger = Logger.getLogger("deviceConnection")

    override fun uninstallApks(
        testPackageName: String,
        packageName: String
    ) {
        println("uninstallApks$device")
        CommandLine.executeCommand(Adb.adbCommand(" -s ${device.serialNumber} shell pm uninstall $testPackageName"))
        CommandLine.executeCommand(Adb.adbCommand(" -s ${device.serialNumber} shell pm uninstall $packageName"))
    }

    override fun installApks(testExecutionTaskSpec: TestExecutionTaskSpec) {
        println("installApks$device")
        CommandLine.executeCommand(Adb.adbCommand(" -s ${device.serialNumber} install -t ${testExecutionTaskSpec.androidTestApk.absolutePath}"))
            .also {
                println("install test apk ${it.getOrThrow()}")
            }
        CommandLine.executeCommand(Adb.adbCommand(" -s ${device.serialNumber} install ${testExecutionTaskSpec.androidAppApk.absolutePath}"))
            .also {
                println("install android apk ${it.getOrThrow()}")
            }
    }

    override fun installOrchestratorApk() {
        CommandLine.executeCommand(Adb.adbCommand(" -s ${device.serialNumber} uninstall androidx.test.services"))
        CommandLine.executeCommand(Adb.adbCommand(" -s ${device.serialNumber} uninstall androidx.test.orchestrator"))

        val api = deviceApiLevel()

        val orchapk = File("orchestrator-1.4.1.apk")
        val services = File("test-services-1.4.2.apk")

        var forceQuery = ""
        loadApks(orchapk, services)

        if ((api.toIntOrNull() ?: 0) >= 30) {
            forceQuery = "--force-queryable"
        }

        CommandLine.executeCommand(Adb.adbCommand(" -s ${device.serialNumber} install $forceQuery -r ${orchapk.absolutePath}"))
        CommandLine.executeCommand(Adb.adbCommand(" -s ${device.serialNumber} install $forceQuery  -r ${services.absolutePath}"))
    }

    private fun loadApks(orchapk: File, services: File) {
        if (!orchapk.exists()) {
            this.javaClass.classLoader
                .getResource("orchestrator-1.4.1.apk")
                ?.openStream()
                ?.transferTo(orchapk.outputStream())
        }
        if (services.exists().not()) {
            this.javaClass.classLoader
                .getResource("test-services-1.4.2.apk")
                ?.openStream()
                ?.transferTo(services.outputStream())
        }
    }

    private fun deviceApiLevel() =
        CommandLine.executeCommand(Adb.adbCommand(" -s ${device.serialNumber} shell getprop ro.build.version.sdk"))
            .getOrThrow().trim()

    override fun runAndroidTests(
        testExecutionTaskSpec: TestExecutionTaskSpec,
        totalDevices: Int,
        currentDeviceIndex: Int
    ) {
        println("runAndroidTests$device")

        val command =
            """ -s ${device.serialNumber} shell 'CLASSPATH=${'$'}(pm path androidx.test.services) app_process / \
 androidx.test.services.shellexecutor.ShellMain am instrument -w -e \
 targetInstrumentation ${testExecutionTaskSpec.instrumentPackage}/${testExecutionTaskSpec.customRunner} \
 -e numShards $totalDevices -e shardIndex $currentDeviceIndex \
 -e listener ${testExecutionTaskSpec.listenerClass} \
 -e clearPackageData true \
 androidx.test.orchestrator/.AndroidTestOrchestrator'"""

        logger.info(command)

        /**
         * adb shell 'CLASSPATH=$(pm path androidx.test.services) app_process / \androidx.test.services.shellexecutor.ShellMain am instrument -w -e \
         * targetInstrumentation com.xyz.package.test/androidx.test.runner.AndroidJUnitRunner \androidx.test.orchestrator/.AndroidTestOrchestrator'
         */
        CommandLine.executeCommand(
            Adb.adbCommand(command).also { println(it) }
        ).getOrThrow().also { println(it) }
    }

    override fun deleteTestResults() {
        println("deleteTestResults$device")
        // TODO check this logic
        if ((deviceApiLevel().toIntOrNull() ?: 0) >= 30) {
            CommandLine.executeCommand(Adb.adbCommand(" -s ${device.serialNumber} shell rm -f -rR -v /storage/self/primary/Documents/opentestlab/testlogs"))
        } else {
            CommandLine.executeCommand(Adb.adbCommand(" -s ${device.serialNumber} shell rm -f -rR -v /storage/self/primary/opentestlab/testlogs"))
        }
    }

    override fun pullTestResults(
        testExecutionTaskSpec: TestExecutionTaskSpec,
    ) {
        val reportsDir = File(testExecutionTaskSpec.workingDir, "reports")
        reportsDir.mkdirs()
        println("pullTestResults $device into ${reportsDir.absolutePath}")

        if ((deviceApiLevel().toIntOrNull() ?: 0) >= 30) {
            CommandLine.executeCommand(
                Adb.adbCommand(
                    "-s ${device.serialNumber} pull " +
                            "/storage/self/primary/Documents/opentestlab/testlogs/. " +
                            "${reportsDir.absolutePath}/"
                )
            )
        } else {
            CommandLine.executeCommand(
                Adb.adbCommand(
                    "-s ${device.serialNumber} pull " +
                            "/storage/self/primary/opentestlab/testlogs/. " +
                            "${reportsDir.absolutePath}/"
                )
            )
        }
    }
}
