package dev.oianmol.opentestlab.android.testexec.testrunner

import dev.oianmol.opentestlab.DeviceFarmDevice
import dev.oianmol.opentestlab.DeviceFarmTestResults
import dev.oianmol.dev.oianmol.opentestlab.android.adbandfriends.DeviceDiscovery
import dev.oianmol.dev.oianmol.opentestlab.runCatchingCancellable
import dev.oianmol.opentestlab.android.devicefarm.DeviceAvailabilityStore
import dev.oianmol.opentestlab.android.testexec.TestExecutionTaskSpec
import dev.oianmol.opentestlab.android.testexec.commandrunner.DeviceCommandRunner
import dev.oianmol.opentestlab.android.testexec.resultreader.DeviceTestResultReader
import kotlinx.coroutines.async
import kotlinx.coroutines.awaitAll
import kotlinx.coroutines.coroutineScope
import java.util.logging.Logger

interface ITestRunner {
    suspend fun canExecute(testExecutionTaskSpec: TestExecutionTaskSpec): Boolean
    suspend fun execute(testExecutionTaskSpec: TestExecutionTaskSpec): DeviceFarmTestResults
}

class DeviceFarmTestRunner(
    iDiscoverDevices: DeviceDiscovery,
    deviceCommandRunner: DeviceCommandRunner,
    deviceAvailabilityStore: DeviceAvailabilityStore,
    deviceTestResultReader: DeviceTestResultReader
) : ITestRunner,
    DeviceDiscovery by iDiscoverDevices,
    DeviceCommandRunner by deviceCommandRunner,
    DeviceAvailabilityStore by deviceAvailabilityStore,
    DeviceTestResultReader by deviceTestResultReader {
    private val logger = Logger.getLogger("OpenTestLabTestRunner")

    override suspend fun canExecute(testExecutionTaskSpec: TestExecutionTaskSpec): Boolean {
        val allDevices = listDevices()
        println("allDevices$allDevices")
        val availableDevices = allDevices.filter { isDeviceAvailable(it.serialNumber) }
        println("availableDevices$availableDevices")
        return availableDevices.isNotEmpty()
    }

    override suspend fun execute(testExecutionTaskSpec: TestExecutionTaskSpec): DeviceFarmTestResults {
        val deviceFarmTestResults = DeviceFarmTestResults.newBuilder()

        val allDevices = listDevices()

        val devices = allDevices.filter { isDeviceAvailable(it.serialNumber) }

        coroutineScope {
            runCatching {
                val deviceInstalledTo = mutableListOf<DeviceFarmDevice>()
                devices.map { device ->
                    async {
                        runCatchingCancellable {
                            markDeviceUnavailable(device)

                            val deviceConnection = deviceConnection(device = device)

                            runCatchingCancellable {
                                deviceConnection.uninstallApks(
                                    testPackageName = testExecutionTaskSpec.testPackageName,
                                    packageName = testExecutionTaskSpec.packageName
                                )
                            }

                            deviceConnection.installApks(testExecutionTaskSpec = testExecutionTaskSpec)

                            deviceConnection.installOrchestratorApk()

                            deviceInstalledTo.add(device)
                        }.exceptionOrNull()?.printStackTrace()
                    }
                }.awaitAll()

                val totalDevices = deviceInstalledTo.size

                deviceInstalledTo.mapIndexed { currentDeviceIndex, device ->
                    async {
                        runCatchingCancellable {
                            val deviceConnection = deviceConnection(device)

                            deviceConnection.deleteTestResults() // previous if any

                            runCatchingCancellable {
                                deviceConnection.runAndroidTests(
                                    testExecutionTaskSpec = testExecutionTaskSpec,
                                    totalDevices = totalDevices,
                                    currentDeviceIndex = currentDeviceIndex
                                )
                            }.fold(onSuccess = {
                                it
                            }, onFailure = {
                                it.printStackTrace()
                            })

                            deviceConnection.pullTestResults(testExecutionTaskSpec)

                            deviceConnection.deleteTestResults()

                            deviceConnection.uninstallApks(
                                testPackageName = testExecutionTaskSpec.testPackageName,
                                packageName = testExecutionTaskSpec.packageName
                            )

                            markDeviceAvailable(deviceFarmDevice = device)

                        }.exceptionOrNull()?.let { throwable ->
                            throwable.printStackTrace()
                            markDeviceAvailable(deviceFarmDevice = device)
                            throw throwable
                        }
                    }
                }.awaitAll()
                // wait for all jobs to complete
            }.exceptionOrNull()?.let {
                it.printStackTrace()
                devices.forEach { deviceFarmDevice ->
                    markDeviceAvailable(deviceFarmDevice)
                }
            }
        }

        println(deviceFarmTestResults.toString())
        return deviceFarmTestResults.build()
    }
}