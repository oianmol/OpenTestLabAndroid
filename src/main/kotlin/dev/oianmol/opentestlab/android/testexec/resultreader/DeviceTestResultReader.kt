package dev.oianmol.opentestlab.android.testexec.resultreader

import dev.oianmol.opentestlab.android.testexec.TestExecutionTaskSpec
import dev.oianmol.opentestlab.android.testexec.resultreader.utils.XmlTestSuite
import dev.oianmol.opentestlab.android.testexec.resultreader.utils.parseAs
import dev.oianmol.opentestlab.api.models.DeviceFarmTestResults
import java.nio.file.Files
import kotlin.io.path.extension
import kotlin.io.path.reader

interface DeviceTestResultReader {
    fun readTestResultFor(testExecutionTaskSpec: TestExecutionTaskSpec): List<DeviceFarmTestResults.Testsuite>
}

object DefaultDeviceTestResultReader : DeviceTestResultReader {
    override fun readTestResultFor(testExecutionTaskSpec: TestExecutionTaskSpec): List<DeviceFarmTestResults.Testsuite> {
        return testExecutionTaskSpec.workingDir.listFiles()?.map { it.toPath() }
            ?.filter { Files.isRegularFile(it) && it.extension == "xml" }
            ?.toList()
            ?.map {
                val testResultItem = it.reader().readText().parseAs<XmlTestSuite>()
                DeviceFarmTestResults.Testsuite.Builder()
                    .tests(testResultItem.tests?.toIntOrNull() ?: -1)
                    .errors(testResultItem.errors?.toIntOrNull() ?: -1)
                    .failures(testResultItem.failures?.toIntOrNull() ?: -1)
                    .skipped(testResultItem.skipped?.toIntOrNull() ?: -1)
                    .name(it.toFile().name ?: testResultItem.name ?: "Name")
                    .hostname(testResultItem.hostname ?: "")
                    .time(testResultItem.time?.toIntOrNull() ?: -1)
                    .timestamp(testResultItem.timestamp ?: "")
                    .properties(
                        DeviceFarmTestResults.Properties.Builder()
                            .property(testResultItem.properties?.property?.map { property ->
                                DeviceFarmTestResults.Property.Builder()
                                    .name(property.name ?: "")
                                    .value(property.value ?: "")
                                    .build()
                            } ?: emptyList())
                            .build()
                    )
                    .testcase(testResultItem.testcase?.map { testcase ->
                        DeviceFarmTestResults.Testcase.Builder()
                            .name(testcase.name ?: "")
                            .classname(testcase.classname ?: "")
                            .status(testcase.status ?: "")
                            .message(testcase.message)
                            .type(testcase.type)
                            .time(testcase.time?.toIntOrNull() ?: -1)
                            .trace(testcase.trace)
                            .build()
                    }).build()
            } ?: emptyList()
    }
}