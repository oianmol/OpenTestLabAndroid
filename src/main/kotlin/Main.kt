package dev.oianmol

import dev.oianmol.dev.oianmol.opentestlab.android.adbandfriends.DeviceDiscoveryViaADB
import dev.oianmol.dev.oianmol.opentestlab.android.reporting.DeviceFarmReportManagementService
import dev.oianmol.dev.oianmol.opentestlab.android.adbandfriends.DeviceFarmService
import dev.oianmol.dev.oianmol.opentestlab.android.testexec.TestExecutionService
import dev.oianmol.opentestlab.android.devicefarm.DefaultDeviceAvailabilityStore
import dev.oianmol.opentestlab.android.testexec.DeviceFarmTestExecScope
import dev.oianmol.opentestlab.android.testexec.commandrunner.DefaultDeviceCommandRunner
import dev.oianmol.opentestlab.android.testexec.resultreader.DefaultDeviceTestResultReader
import dev.oianmol.opentestlab.android.testexec.testrunner.DeviceFarmTestRunner
import io.grpc.ServerBuilder

fun main() {
    val server = ServerBuilder.forPort(8081)
        .maxInboundMessageSize(Int.MAX_VALUE)
        .addService(DeviceFarmService(deviceDiscovery = DeviceDiscoveryViaADB))
        .addService(
            TestExecutionService(
                testExecScope = DeviceFarmTestExecScope,
                testRunner = DeviceFarmTestRunner(
                    iDiscoverDevices = DeviceDiscoveryViaADB,
                    deviceCommandRunner = DefaultDeviceCommandRunner,
                    deviceAvailabilityStore = DefaultDeviceAvailabilityStore,
                    deviceTestResultReader = DefaultDeviceTestResultReader
                )
            )
        )
        .addService(DeviceFarmReportManagementService(testExecScope = DeviceFarmTestExecScope))
        .build()
        .start()
    println("server started at port:${server.port}")
    server.awaitTermination()
    println("server stopped!")

}