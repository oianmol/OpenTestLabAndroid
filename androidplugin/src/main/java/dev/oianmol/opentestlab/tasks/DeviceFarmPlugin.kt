package dev.oianmol.opentestlab.tasks

import com.android.build.gradle.AppExtension
import com.android.build.gradle.TestedExtension
import com.android.build.gradle.api.TestVariant
import dev.oianmol.opentestlab.tasks.DeviceFarmPlugin.Companion.GRADLE_METHOD_NAME
import dev.oianmol.opentestlab.tasks.DeviceFarmPlugin.Companion.OPEN_TEST_LAB
import org.gradle.api.GradleException
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.Task
import java.util.*


class DeviceFarmPlugin : Plugin<Project> {
    companion object {
        const val OPEN_TEST_LAB = "OpenTestLab"
        const val GRADLE_METHOD_NAME = "openTestLabConfigure"
    }

    override fun apply(project: Project) {
        project.setupTestLabExtension()

        project.afterEvaluate {
            logger.lifecycle("*************** Open Test Lab Plugin ***************")
            setupOpenTestLab()
            logger.lifecycle("********************************************************")
        }
    }
}

internal fun Project.setupTestLabExtension() {
    extensions.create(
        GRADLE_METHOD_NAME,
        OpenTestLabExtension::class.java,
        project
    )
}

internal fun Project.setupOpenTestLab() {
    val androidExtension: Any? = project.extensions.findByName("android")
    project.extensions.findByType(OpenTestLabExtension::class.java)?.apply {
        val openTestLabExtension = this
        configureTestTasks(androidExtension as AppExtension, openTestLabExtension)
    }
}

internal fun Project.configureTestTasks(androidExtension: AppExtension, openTestLabExtension: OpenTestLabExtension) {
    (androidExtension as TestedExtension).apply {
        testVariants.toList().forEach { testVariant ->
            val identifier =
                testVariant.name.replaceFirstChar { if (it.isLowerCase()) it.titlecase(Locale.getDefault()) else it.toString() }
            tasks.register(
                "openDeviceFarmTest$identifier",
                AndroidTestDeviceFarmTask::class.java,
            ) {
                group = OPEN_TEST_LAB
                description =
                    "Execute DeviceFarm Test for $identifier"
                val appVariant = androidExtension.applicationVariants.toList()
                    .firstOrNull {
                        it.buildType == testVariant.buildType
                                && it.flavorName == testVariant.flavorName
                    }!!
                dependsOn(arrayOf(resolveAssemble(testVariant)))
                dependsOn(arrayOf(resolveTestAssemble(testVariant)))

                doFirst {
                    if (openTestLabExtension.serverAddress.isNullOrEmpty()) {
                        throw GradleException("You need to set openTestLabExtension.serverAddress = 'your-server-public-ip' before run")
                    }
                }

                serverAddress = openTestLabExtension.serverAddress
                appBinary = appVariant.outputs.firstOrNull()?.outputFile?.absolutePath
                applicationPackageName = appVariant.applicationId
                applicationTestPackageName = testVariant.applicationId
                testAppBinary = testVariant.outputs.firstOrNull()?.outputFile?.absolutePath
            }
            tasks.register(
                "openDeviceFarmFetchReportFor$identifier",
                TestLabPullReportTask::class.java,
            ) {
                group = OPEN_TEST_LAB
                serverAddress = openTestLabExtension.serverAddress
                description = "Open DeviceFarm Fetch Report"
            }
        }
    }
}

private fun resolveTestAssemble(variant: TestVariant): Task = try {
    variant.assembleProvider.get()
} catch (e: IllegalStateException) {
    variant.assemble
}

private fun resolveAssemble(variant: TestVariant): Task = try {
    variant.testedVariant.assembleProvider.get()
} catch (e: IllegalStateException) {
    variant.testedVariant.assemble
}
