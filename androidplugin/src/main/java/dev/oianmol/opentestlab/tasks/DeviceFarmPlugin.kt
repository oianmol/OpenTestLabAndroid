package dev.oianmol.opentestlab.tasks

import com.android.build.gradle.AppExtension
import com.android.build.gradle.TestedExtension
import com.android.build.gradle.api.ApplicationVariant
import com.android.build.gradle.api.TestVariant
import dev.oianmol.opentestlab.tasks.DeviceFarmPlugin.Companion.OPEN_TEST_LAB
import org.gradle.api.Plugin
import org.gradle.api.Project


class DeviceFarmPlugin : Plugin<Project> {
    companion object {
        const val OPEN_TEST_LAB = "OPEN_TEST_LAB"
    }

    override fun apply(project: Project) {
        with(project) {
            project.afterEvaluate {
                logger.lifecycle("*************** Open Test Lab Plugin ***************")
                deviceFarm()
                logger.lifecycle("********************************************************")
            }
        }
    }
}

fun Project.deviceFarm() {
    val androidExtension: Any? = project.extensions.findByName("android")
    val appExtension = (androidExtension as AppExtension)
    (androidExtension as TestedExtension).apply {
        testVariants.toList().forEach { testVariant ->
            tasks.register(
                "openDeviceFarmTest${testVariant.name.capitalize()}",
                AndroidTestDeviceFarmTask::class.java,
            ) {
                group = OPEN_TEST_LAB
                description = "Execute DeviceFarm Test"
                val appVariant = appExtension.applicationVariants.toList()
                    .firstOrNull {
                        it.buildType == testVariant.buildType
                                && it.flavorName == testVariant.flavorName
                    }!!
                appBinary = appVariant.outputs.firstOrNull()?.outputFile?.absolutePath
                applicationPackageName = appVariant.applicationId
                applicationTestPackageName = testVariant.applicationId
                testAppBinary = testVariant.outputs.firstOrNull()?.outputFile?.absolutePath
            }
            tasks.register(
                "openDeviceFarmFetchReportFor${testVariant.name.capitalize()}",
                TestLabPullReportTask::class.java,
            ) {
                group = OPEN_TEST_LAB
                description = "Open DeviceFarm Fetch Report"
            }
        }
    }
}


sealed class ExtensionType(open val testVariant: TestVariant) {
    data class Application(override val testVariant: TestVariant, val appVariant: ApplicationVariant) :
        ExtensionType(testVariant)
}