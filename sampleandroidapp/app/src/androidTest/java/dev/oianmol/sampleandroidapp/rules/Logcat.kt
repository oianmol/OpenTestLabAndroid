package dev.oianmol.sampleandroidapp.rules

import android.util.Log
import java.io.BufferedReader
import java.io.IOException
import java.io.InputStreamReader
import java.util.concurrent.TimeUnit

object Logcat {
    private const val TAG = "OpentestLabLogcatCapture"
    fun clearLogcat() {
        try {
            Runtime.getRuntime().exec(arrayOf("logcat", "-c"))
        } catch (e: IOException) {
            Log.e(TAG, "Could not clear logcat", e)
        }
    }

    /**
     * Return adb logs since the start of the specified test.
     *
     * Based on https://www.braze.com/resources/articles/logcat-junit-android-tests
     */
    fun getTestLogs(testName: String): String {
        val logLines = StringBuilder()

        // A snippet of text that uniquely determines where the relevant logs start in the logcat
        val testStartMessage = "TestRunner: started: $testName"
        val testFinishMessage = "TestRunner: finished: $testName"

        // When true, write every line from the logcat buffer to the string builder
        var recording = false

        // Logcat command:
        //   -d asks the command to completely dump to our buffer, then return
        //   -v threadtime sets the output log format
        val command = arrayOf("logcat", "-d", "-v", "threadtime")
        var bufferedReader: BufferedReader? = null
        val timeStart = System.currentTimeMillis()
        try {
            val process: Process = Runtime.getRuntime().exec(command)
            bufferedReader = BufferedReader(InputStreamReader(process.getInputStream()))
            var line: String?
            while (bufferedReader.readLine().also { line = it } != null) {
                if (line?.contains(testStartMessage) == true) {
                    recording = true
                }
                if (recording) {
                    logLines.append(line)
                    logLines.append('\n')
                }
                val timeDiff = System.currentTimeMillis().minus(timeStart)
                if (TimeUnit.MILLISECONDS.toSeconds(timeDiff) > 20 || line?.contains(
                        testFinishMessage,
                    ) == true
                ) {
                    break
                }
            }
        } catch (e: IOException) {
            Log.e(TAG, "Failed to run logcat command", e)
        } finally {
            if (bufferedReader != null) {
                try {
                    bufferedReader.close()
                } catch (e: IOException) {
                    Log.e(TAG, "Failed to close buffered reader", e)
                }
            }
        }
        return logLines.toString()
    }

}
