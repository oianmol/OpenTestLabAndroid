package dev.oianmol.sampleandroidapp.runner

import android.app.Instrumentation
import android.os.Build
import android.os.Build.VERSION
import android.os.Environment
import android.os.ParcelFileDescriptor
import android.os.ParcelFileDescriptor.AutoCloseInputStream
import android.util.Log
import androidx.test.internal.runner.listener.InstrumentationRunListener
import dev.oianmol.opentestlab.tasks.android.runner.TestSuiteXmlGen
import dev.oianmol.sampleandroidapp.rules.InstrumentationTestingUtils
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import org.junit.runner.Description
import org.junit.runner.Result
import org.junit.runner.notification.Failure
import java.io.File
import java.io.FileInputStream
import java.text.SimpleDateFormat
import java.util.Date
import java.util.TimeZone

class OpenAndroidTestRunListener : InstrumentationRunListener(),
    CoroutineScope by CoroutineScope(Dispatchers.IO) {

    private var videoRecordingDescriptor: ParcelFileDescriptor? = null
    private val deviceModel: String = Build.MODEL
    private val deviceApiLevel = VERSION.SDK_INT.toString()
    private var currentTestSuite: Testsuite = Testsuite()
    private fun deviceInfo() = deviceModel + "_" + deviceApiLevel

    private fun startTimeIso(): String {
        val df = SimpleDateFormat(
            "yyyy-MM-dd'T'HH:mm'Z'",
        )
        df.timeZone = TimeZone.getTimeZone("UTC")
        return df.format(Date())
    }

    private fun properties() = Properties(
        property = mutableListOf(
            Property("model", Build.MODEL),
            Property("apiLevel", VERSION.SDK_INT.toString()),
            Property("manufacturer", Build.MANUFACTURER),
        ),
    )

    private fun xmlFile(): File {
        val fileName = "androidTest_${currentTestSuite.name}.xml"
        val file = File(testFileDir(), fileName)
        if (file.exists().not()) {
            file.createNewFile()
        }
        return file
    }

    private fun videoFile(methodName: String, className: String): File {
        val displayName = "$methodName($className)"
        val fileName = "${displayName}.mp4"
        return File(testFileDir(), fileName)
    }

    override fun testRunStarted(description: Description) {
        Log.d("OpenAndroidTestRunListener", description.toString())
        currentTestSuite = Testsuite()
        currentTestSuite = currentTestSuite.copy(
            properties = currentTestSuite.properties ?: properties(),
            hostname = currentTestSuite.hostname ?: deviceInfo(),
            timestamp = currentTestSuite.timestamp ?: startTimeIso(),
            name = currentTestSuite.name ?: deviceInfo(),
            testcase = currentTestSuite.testcase,
            testStartTime = currentTestSuite.testStartTime ?: System.currentTimeMillis(),
        )
    }

    private fun startScreenRecord(description: Description) {
        launch {
            withContext(Dispatchers.IO) {
                try {
                    videoRecordingDescriptor = instrumentation.uiAutomation.executeShellCommand(
                        "screenrecord ${
                            videoFile(
                                methodName = description.methodName,
                                className = description.className,
                            )
                        }",
                    )
                    // Read the input stream fully.
                    val fis: FileInputStream = AutoCloseInputStream(videoRecordingDescriptor)
                    fis.use {
                        while (fis.read() != -1);
                    }
                } catch (e: Exception) {
                    e.printStackTrace()
                }
            }
        }
    }

    private fun stopScreenRecord() {
        launch {
            withContext(Dispatchers.IO) {
                try {
                    videoRecordingDescriptor?.close()
                    InstrumentationTestingUtils.executeShellCommand("pkill -2 screenrecord")
                } catch (e: Exception) {
                    e.printStackTrace()
                }
            }
        }
    }

    override fun testRunFinished(result: Result) {
        currentTestSuite.testcase = currentTestSuite.testCases.values.toMutableList()
        currentTestSuite = currentTestSuite.copy(
            failures = currentTestSuite.testcase.filter { it.status == Status.FAILED.toString() }
                .size.toString(),
            tests = currentTestSuite.testcase.size.toString(),
            skipped = currentTestSuite.testcase.filter { it.status == Status.IGNORED.toString() }
                .size.toString(),
            errors = currentTestSuite.testcase.filter { it.status == Status.ASSUMPTION_FAILED.toString() }
                .size.toString(),
            time = currentTestSuite.testcase.sumOf { it.time?.toLongOrNull() ?: 0L }.toString(),
            testcase = currentTestSuite.testcase.toMutableList(),
        )
        writeTestSuite()
    }

    private fun writeTestSuite() {
        xmlFile().delete()
        xmlFile().createNewFile()
        if (currentTestSuite.testcase.size == 1) {
            // we do not want to write the whole suite information.
            TestSuiteXmlGen.printTestResults(currentTestSuite, xmlFile())
        }
    }

    override fun testStarted(description: Description) {
        startScreenRecord(description)
        currentTestSuite = currentTestSuite.copy(name = description.displayName)
        currentTestSuite.testCases[description.methodName]?.let {
            currentTestSuite.testCases[description.methodName] = it.copy(
                name = description.methodName,
                classname = description.className,
                status = Status.STARTED.toString(),
            )
        } ?: run {
            currentTestSuite.testCases[description.methodName] = Testcase(
                startTime = System.currentTimeMillis(),
                name = description.methodName,
                classname = description.className,
            )
        }
    }

    override fun testFinished(description: Description) {
        currentTestSuite.testCases[description.methodName]?.let {
            val newStatus = if (it.status == Status.STARTED.toString()) {
                Status.PASSED.toString()
            } else {
                it.status
            }
            currentTestSuite.testCases[description.methodName] = it.copy(
                status = newStatus,
                name = description.methodName,
                classname = description.className,
                time = (System.currentTimeMillis() - it.startTime!!).toString(),
            )
        }
        stopScreenRecord()
    }

    override fun testFailure(failure: Failure) {
        currentTestSuite.testCases[failure.description.methodName]?.let {
            currentTestSuite.testCases[failure.description.methodName] = it.copy(
                status = Status.FAILED.toString(),
                message = failure.message,
                type = failure.exception.javaClass.name,
                trace = failure.trace,
                name = failure.description.methodName,
                classname = failure.description.className,
                time = (System.currentTimeMillis() - it.startTime!!).toString(),
            )
        }
    }

    override fun testAssumptionFailure(failure: Failure) {
        currentTestSuite.testCases[failure.description.methodName]?.let {
            currentTestSuite.testCases[failure.description.methodName] = it.copy(
                status = Status.ASSUMPTION_FAILED.toString(),
                trace = failure.trace,
                message = failure.message,
                type = failure.exception.javaClass.name,
                name = failure.description.methodName,
                classname = failure.description.className,
                time = (System.currentTimeMillis() - it.startTime!!).toString(),
            )
        }
    }

    override fun testIgnored(description: Description) {
        currentTestSuite.testCases[description.methodName]?.let {
            currentTestSuite.testCases[description.methodName] = it.copy(
                status = Status.IGNORED.toString(),
                name = description.methodName,
                classname = description.className,
                time = (System.currentTimeMillis() - it.startTime!!).toString(),
            )
        }
    }

    override fun setInstrumentation(instr: Instrumentation) {
        super.setInstrumentation(instr)
    }
}

fun testFileDir(logs: String = "testlogs"): File = when {
    VERSION.SDK_INT >= Build.VERSION_CODES.R -> {
        File(
            Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS)
                .toString() + "/opentestlab/$logs",
        ).also {
            it.mkdirs()
        }
        // Make file
    }

    else -> {
        File(
            Environment.getExternalStorageDirectory().toString(),
            "/opentestlab/$logs",
        ).also {
            it.mkdirs()
            // Make file
        }
    }
}
