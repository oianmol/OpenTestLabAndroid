package dev.oianmol.opentestlab.tasks.android.runner

import dev.oianmol.sampleandroidapp.runner.Status
import dev.oianmol.sampleandroidapp.runner.Testsuite
import org.w3c.dom.Document
import java.io.File
import java.io.OutputStream
import javax.xml.parsers.DocumentBuilder
import javax.xml.parsers.DocumentBuilderFactory
import javax.xml.transform.OutputKeys
import javax.xml.transform.Transformer
import javax.xml.transform.TransformerFactory
import javax.xml.transform.dom.DOMSource
import javax.xml.transform.stream.StreamResult
import kotlin.time.Duration.Companion.seconds

object TestSuiteXmlGen {

    private const val TAG_SUITE = "testsuite"
    private const val TAG_PROPERTIES = "properties"
    private const val TAG_PROPERTY = "property"
    private const val TAG_CASE = "testcase"

    private const val TAG_FAILURE = "failure"
    private const val TAG_SKIPPED = "skipped"

    private const val ATTRIBUTE_CLASS = "classname"
    private const val ATTRIBUTE_ERRORS = "errors"
    private const val ATTRIBUTE_FAILURES = "failures"
    private const val ATTRIBUTE_MESSAGE = "message"
    private const val ATTRIBUTE_NAME = "name"
    private const val ATTRIBUTE_SKIPPED = "skipped"
    private const val ATTRIBUTE_TESTS = "tests"
    private const val ATTRIBUTE_TIME = "time"
    private const val ATTRIBUTE_TIMESTAMP = "timestamp"
    private const val ATTRIBUTE_TYPE = "type"
    private const val ATTRIBUTE_VALUE = "value"

    fun printTestResults(suite: Testsuite, file: File) {
        val docFactory: DocumentBuilderFactory = DocumentBuilderFactory.newInstance()
        val docBuilder: DocumentBuilder = docFactory.newDocumentBuilder()
        val doc: Document = docBuilder.newDocument()
        doc.createElement(TAG_SUITE).also { testSuite ->
            testSuite.setAttribute(ATTRIBUTE_FAILURES, suite.failures?:"")
            testSuite.setAttribute(ATTRIBUTE_SKIPPED, suite.skipped?:"")
            testSuite.setAttribute(ATTRIBUTE_ERRORS, suite.errors?:"")
            testSuite.setAttribute(ATTRIBUTE_TESTS, suite.tests?:"")
            testSuite.setAttribute(
                ATTRIBUTE_TIME, suite.time?.toLong()?.div(1.seconds.inWholeMilliseconds.toFloat())
                    .toString()
            )
            testSuite.setAttribute(ATTRIBUTE_TIMESTAMP, suite.timestamp?:"")
            testSuite.setAttribute(ATTRIBUTE_NAME, suite.name?:"")
            doc.appendChild(testSuite)

            val properties = doc.createElement(TAG_PROPERTIES)
            suite.properties?.property?.forEach { property ->
                doc.createElement(TAG_PROPERTY).also { propTag ->
                    propTag.setAttribute(ATTRIBUTE_NAME, property.name?:"")
                    propTag.setAttribute(ATTRIBUTE_VALUE, property.value?:"")
                    properties.appendChild(propTag)
                }
            }
            testSuite.appendChild(properties)
            suite.testCases.values.forEach { testCaseResult ->
                doc.createElement(TAG_CASE).also { testCaseElement ->
                    testCaseElement.setAttribute(ATTRIBUTE_NAME, testCaseResult.name?:"")
                    testCaseElement.setAttribute(ATTRIBUTE_CLASS, testCaseResult.classname?:"")
                    testCaseResult.time?.let { time->
                        testCaseElement.setAttribute(
                            ATTRIBUTE_TIME, time.toLong().div(1.seconds.inWholeMilliseconds.toFloat())
                            .toString())
                    }
                    if (testCaseResult.status == Status.FAILED.toString()) {
                        doc.createElement(TAG_FAILURE).let { failure->
                            failure.setAttribute(ATTRIBUTE_MESSAGE, testCaseResult.message?:"")
                            failure.setAttribute(ATTRIBUTE_TYPE, testCaseResult.type?:"")
                            testCaseResult.trace?.let {
                                val comment = doc.createComment(testCaseResult.trace)
                                failure.appendChild(comment)
                            }
                            testCaseElement.appendChild(failure)
                        }
                    }
                    testSuite.appendChild(testCaseElement)
                }
            }
            writeXml(doc, file.outputStream())
        }
    }

    private fun writeXml(
        doc: Document,
        output: OutputStream
    ) {
        val transformerFactory: TransformerFactory = TransformerFactory.newInstance()
        val transformer: Transformer = transformerFactory.newTransformer()

        // pretty print
        transformer.setOutputProperty(OutputKeys.INDENT, "yes")
        val source = DOMSource(doc)
        val result = StreamResult(output)
        transformer.transform(source, result)
    }

}
